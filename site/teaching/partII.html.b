<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<head>
<META NAME="description" CONTENT="Ohad Kammar's Research">
<META NAME="keywords" CONTENT="ohad kammar, ohad, kammar, research, publications, publication, programming language
semantics, PLT semantics, semantics, category, categories, category theory, logic, computational
effects, effect type systems, type and effect systems, types, effects, effect type system, access control, DCC, CDD, Plotkin, Gordon Plotkin, call by push value, CBPV, call-by-push-value, denotational semantics, continuations, delimited continuations, jump with argument">
<TITLE>Ohad's Research - Part II Project Suggestions</TITLE>
<link rel="icon" href="favicon.ico" type="image/x-icon" >
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon" >
</HEAD>

<h1 id="part-ii-projects-suggestions">Part II Projects Suggestions</h1>
<p>I believe in supervising projects I’m also passionate about, usually involving concepts that tie to advanced, cutting-edge research. The projects below mix programming language and computer science theory with some hacking. In my ideal project, theoretical concepts and developments would yield code that is clean, simple, and straightforward. While the project is entirely your responsibility, I believe you will best develop with close contact, meeting weekly during term or more often as the project requires. Great projects should be challenging, so as long as you are willing to put in the effort, I provide support in terms of guidance, discussion, explanations, and reading material.</p>
<p>Below are some project suggestions. Feel free to contact me even if only parts of the project sound interesting to you, and perhaps we could find a different project. You’re also encouraged to suggest your own projects!</p>
<h2 id="handling-transparent-code-migration">Handling Transparent Code Migration</h2>
<p>The details of implementing distributed protocols, algorithms and programs can be quite hairy, as we need to send code and data between end-points. <em>Mobile computation</em> is an approach to distributed programming where a program works by migrating from one host to another. The migration is called <em>transparent</em> if the execution state of the program is preserved before and after the migration. Concretely, we have a “go” statement that lets us switch to a different machine and continue execution there. For example:</p>
<pre><code>for host in network
  go host
  update_dns_table(&quot;CL&quot;, 128.232.0.20)</code></pre>
<p>Two <a href="http://www.cl.cam.ac.uk/~pes20/acute/paper3.pdf">crucial components</a> of transparent code migration are value marshalling (sending values to a different end-point), and thunkification (reifying computations into marshallable values).</p>
<p>The goal of this project is to utilise a couple of programming language techniques, <a href="http://cs.au.dk/~danvy/tdpe-ln.pdf">type-directed partial evaluation</a> and <a href="http://homepages.inf.ed.ac.uk/slindley/papers/handlers.pdf">effect handlers</a>, to provide a lightweight transparent code-migration library. Then use the language’s existing libraries and features to demonstrate a series of nifty distributed programs, or a big single distributed application. One such example would be to extend Kiselyov’s <a href="http://okmij.org/ftp/continuations/zipper.html#zipper-fs">file server</a> to a distributed file system.</p>
<p>Little work has been done on extending an existing runtime systems easily, and this projects builds on <a href="http://www.kb.ecei.tohoku.ac.jp/~sumii/">Sumii’s work</a> this project builds which uses <a href="http://dl.acm.org/citation.cfm?id=91622">delimited continuations</a>. One reason we might want to write migrating code is to have some computational effects (state changes, exceptions, I/O) at different hosts, which the Sumii’s approach doesn’t deal with, but effect handlers are well-suited for.</p>
<p>Your profile: eagerness to learn advanced functional programming tools and techniques (e.g., <a href="http://www.haskell.org/">Haskell</a>, <a href="http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf">monads</a>, delimited continuations, effect handlers, <a href="http://dl.acm.org/citation.cfm?id=75283">type-classes</a>, <a href="http://www.st.cs.uni-sb.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf">zippers</a>), and acquire new programming abstractions and use them in exciting ways.</p>
<p>Related courses that you have taken or will take this year: <a href="http://www.cl.cam.ac.uk/teaching/1314/Semantics/">semantics</a>, <a href="http://www.cl.cam.ac.uk/teaching/1415/Types/">types</a>, <a href="http://www.cl.cam.ac.uk/teaching/1314/ConceptsPL/">concepts in programming languages</a>, and <a href="http://www.cl.cam.ac.uk/teaching/1314/part1b.html">concurrent and distributed systems</a>.</p>
<h1 id="past-projects">Past projects</h1>
<p>These are some previously advertised projects and how they ended up.</p>
<h2 id="graphical-and-polynomial-combinations-of-algebraic-theories-for-semantics">Graphical and Polynomial Combinations of Algebraic Theories for Semantics</h2>
<p><strong>Outcome:</strong> This project attracted some attention from prospective students, I fleshed out a more concrete outline, which made me realise this project can be even more fun than I expected. As no student ended up choosing this project, I decided to do it myself. I will be presenting the <a href="http://www.cl.cam.ac.uk/~ok259/graphtool">webtool</a> I produced at the upcoming <a href="https://www.mpi-sws.org/~neelk/hope2014/">3rd ACM SIGPLAN workshop on higher-order porgramming with effects</a>, co-located with the <a href="http://icfpconference.org/icfp2014/">19th ACM SIGPLAN international conference on functional programming</a>.</p>
<p>(Based on <a href="http://homepages.inf.ed.ac.uk/gdp/publications/Comb_Effects_Jour.pdf#page=34">pages 34-38</a> of Hyland, Plotkin and Power’s <a href="http://homepages.inf.ed.ac.uk/gdp/publications/Comb_Effects_Jour.pdf">Combining Effects: Sum and Tensor</a>.)</p>
<p>Defining the meaning of programming languages using <em>denotational semantics</em> is particularly useful for optimising compiler design. When constructing denotational semantics for languages with computational effects (such as state, exceptions, I/O, and non-determinism) two algebraic operations emerge as useful: the sum of two theories and their tensor. These operators lead to a description of algebraic semantics as polynomials in theories. However, choosing the exact order in which to perform these two operations on the theories at hand is non-trivial. Arranging the data as a graph leads to a more intuitive description: each semantic theory corresponds to a vertex, and two vertices are connected iff the corresponding theories should commute. The graphical notation is strictly <em>more</em> expressive than the polynomial notation. <em>Linear</em> polynomials enable an extraction of the monadic semantics using monad transformers, which are already usable by functional programmers.</p>
<p>The goal of this challenging project is to provide tools for investigating algebraic semantics. In particular, studying and implementing Hyland et al.’s various algorithms:</p>
<ul>
<li>deciding whether a given graph description has a corresponding polynomial description and extracting this polynomial; and</li>
<li>deciding whether a polynomial is linear and extracting the monad transformer stack corresponding to a linear polynomial.</li>
</ul>
<p>For a successful project, the student would need to understand the algebraic properties of these polynomials, their connection with the graphical notation, and the various algorithms involved. The student would also need to implement graph algorithms and data structures for syntax.</p>
<p><em>(8 October 2013: Check this page later for additional project suggestions…)</em></p>